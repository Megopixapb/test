import random
import string
import asyncio
from datetime import datetime
import logging
import aiomysql
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram import Router

 # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '7596820732:AAErcpw_U-hk64LuP60tOEvrYi6l7pNDeao'
bot = Bot(token=API_TOKEN)

 # –°–æ–∑–¥–∞–µ–º Router –∏ Dispatcher
router = Router()
dp = Dispatcher()

 # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

 # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –æ–ø—Ü–∏–π
GAMES = ["Game1", "Game2", "Game3"]
SCRIPT_OPTIONS = ["Free —Å–∫—Ä–∏–ø—Ç", "VIP —Å–∫—Ä–∏–ø—Ç"]

 # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
selected_game = None

 # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
     keyboard = ReplyKeyboardMarkup(
         keyboard=[[KeyboardButton(text=game)] for game in GAMES],
         resize_keyboard=True
     )
     return keyboard

 # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–∫—Ä–∏–ø—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def script_menu():
     keyboard = ReplyKeyboardMarkup(
         keyboard=[[KeyboardButton(text=option)] for option in SCRIPT_OPTIONS] + [[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]],
         resize_keyboard=True
     )
     return keyboard

 # –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def token_refresh_menu():
     keyboard = ReplyKeyboardMarkup(
         keyboard=[[KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")]],
         resize_keyboard=True
     )
     return keyboard

 # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
def generate_token():
     return ''.join(random.choices(string.ascii_letters + string.digits, k=10))

 # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def get_db_pool():
     return await aiomysql.create_pool(
         host='FVH1.spaceweb.ru',
         port=3306,
         user='megopixapb',
         password='Rdfhnbhf1192602Q1',
         db='megopixapb',
         charset='utf8mb4'
     )

 # –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start(message: types.Message):
     await message.answer("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∏–≥—Ä—É:", reply_markup=main_menu())

 # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
@router.message(lambda message: message.text in GAMES)
async def game_selected(message: types.Message):
     global selected_game
     selected_game = message.text
     await message.answer(f"üõ† –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_game}.\n\nüìú –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–∫—Ä–∏–ø—Ç–∞:", reply_markup=script_menu())

 # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(lambda message: message.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
     global selected_game
     selected_game = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
     await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

 # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫—Ä–∏–ø—Ç–∞
@router.message(lambda message: message.text in SCRIPT_OPTIONS)
async def script_selected(message: types.Message):
     global selected_game
     if not selected_game:
         await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É.")
         return

     pool = await get_db_pool()
     if pool is None:
         await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
         return

     script_type = message.text
     tg_id = message.from_user.id

     async with pool.acquire() as conn:
         async with conn.cursor() as cursor:
             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
             await cursor.execute(
                 "SELECT token FROM users WHERE tg_id = %s AND game = %s AND active_token = 1",
                 (tg_id, selected_game)
             )
             row = await cursor.fetchone()

             if row:
                 active_token = row[0]
                 await message.answer(f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è {selected_game}: {active_token}.")
                 return

             # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
             token = generate_token()
             activation_date = datetime.now()

             try:
                 await cursor.execute(
                     """
                     INSERT INTO users (tg_id, username, game, free, vip, token, activation_date, active_token)
                     VALUES (%s, %s, %s, %s, %s, %s, %s, 1)
                     """,
                     (tg_id, message.from_user.username, selected_game,
                      script_type == "Free —Å–∫—Ä–∏–ø—Ç", script_type == "VIP —Å–∫—Ä–∏–ø—Ç",
                      token, activation_date)
                 )
                 await conn.commit()
                 await message.answer(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è {selected_game} —Å–æ–∑–¥–∞–Ω: {token}.",
                                      reply_markup=main_menu())
             except Exception as e:
                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                 await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
# ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /check_token
@router.message(Command("check_token"))
async def check_token(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã
    if message.chat.type == "supergroup" or message.chat.type == "group":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        token = message.text.split(" ")[1] if len(message.text.split(" ")) > 1 else None

        if not token:
            await message.answer("invalid")
            return

        pool = await get_db_pool()
        async with pool.acquire() as conn:
            async with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
                await cursor.execute("SELECT free, vip FROM users WHERE token = %s AND active_token = 1", (token,))
                row = await cursor.fetchone()

                if not row:
                    await message.answer("invalid")
                    return

                free, vip = row
                if free:
                    await message.answer("free")
                elif vip:
                    await message.answer("vip")
                else:
                    await message.answer("invalid")

                # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                await cursor.execute("UPDATE users SET active_token = 0 WHERE token = %s", (token,))
                await conn.commit()
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
